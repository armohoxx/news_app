//
//  MainViewController.swift
//  news_app
//
//  Created Phattarapon Jungtakarn on 22/7/2566 BE.
//  Copyright © 2566 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class MainViewController: UIViewController {

	var presenter: MainPresenterProtocol?
    var newsData: NewsEntity?
    var searching: Bool = false
    var searchingAllNews = [ArticlesEntity]()
    let fontDetail = UIFont.systemFont(ofSize: 16.0, weight: .regular)

    @IBOutlet weak var searchBar: UISearchBar!
    @IBOutlet weak var collectionViewNews: UICollectionView!
    @IBOutlet weak var activityIndicator: UIActivityIndicatorView!
    @IBOutlet weak var noResultsSearchLabel: UILabel!
    
    override func willTransition(to newCollection: UITraitCollection, with coordinator: UIViewControllerTransitionCoordinator) {
        let isLandscape = UIDevice.current.orientation.isLandscape

        if isLandscape {
            DispatchQueue.main.async{
                self.collectionViewNews?.reloadSections(NSIndexSet(index: 0) as IndexSet)
            }
        } else {
            DispatchQueue.main.async{
                self.collectionViewNews?.reloadSections(NSIndexSet(index: 0) as IndexSet)
            }
        }
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.presenter?.notifyFetchNewsData()
        self.initUI()
    }
    
    func initUI() {
        self.setupNavbar()
        self.setupSearchBar()
        self.activityIndicator.bringSubviewToFront(self.collectionViewNews)
        self.activityIndicator.startAnimating()
        let nibNewsCell = UINib(nibName: "MainNewsCell", bundle: nil)
        self.collectionViewNews.register(nibNewsCell, forCellWithReuseIdentifier: "MainNewsCell")
        self.noResultsSearchLabel.isHidden = true
    }
    
    func setupNavbar() {
        self.navigationController?.navigationBar.isHidden = false
        self.navigationItem.title = "News"
    }
    
    func setupSearchBar() {
        self.searchBar.delegate = self
    }

}

extension MainViewController: MainViewProtocol {
    
    func displayNewsData(newsData: NewsEntity) {
        self.newsData = newsData
        self.collectionViewNews.reloadData()
        self.activityIndicator.stopAnimating()
        self.activityIndicator.isHidden = true
    }
    
}

extension MainViewController: UISearchBarDelegate {
    
    func searchBarTextDidBeginEditing(_ searchBar: UISearchBar) {
        if searchBar.text != "" {
            searchBar.text = ""
            self.searching = false
            self.noResultsSearchLabel.isHidden = true
            self.searchingAllNews = self.newsData?.articles ?? []
            self.collectionViewNews.reloadData()
        } else {
            self.searching = false
            self.noResultsSearchLabel.isHidden = true
        }
    }
       
    func searchBarTextDidEndEditing(_ searchBar: UISearchBar) {
        self.view.endEditing(true)
        if searchBar.text != "" {
            self.searching = true
            if self.searchingAllNews.count == 0 {
                self.noResultsSearchLabel.isHidden = false
                self.collectionViewNews.reloadData()
            } else {
                self.noResultsSearchLabel.isHidden = true
                self.collectionViewNews.reloadData()
            }
        } else {
            self.searching = false
            self.noResultsSearchLabel.isHidden = true
            self.collectionViewNews.reloadData()
        }
    }
       
    func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {
        self.noResultsSearchLabel.isHidden = true
        self.searching = false
        self.view.endEditing(true)
    }
    
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        self.view.endEditing(true)
        if searchBar.text != "" {
            self.searching = true
        } else {
            self.searching = false
        }
    }
    
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        if searchText.count == 0 {
            self.searching = false
            self.noResultsSearchLabel.isHidden = true
            self.collectionViewNews.reloadData()
        } else {
            if let articles = self.newsData?.articles {
                self.searchingAllNews = articles.filter({ (dataNews) -> Bool in
                    let tileString: NSString = String(dataNews.title).trimmingCharacters(in: .whitespacesAndNewlines) as NSString
                    let tmpDescript: NSString = String(dataNews.descriptionNews).trimmingCharacters(in: .whitespacesAndNewlines) as NSString
                    
                    let formatter = DateFormatter()
                    formatter.locale = Locale(identifier: "en_US")
                    formatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ssZ"
                    
                    let timeDate = formatter.date(from: dataNews.publishedAt) ?? Date()
                    
                    let dateFormatter = DateFormatter()
                    dateFormatter.locale = Locale(identifier: "en_US")
                    dateFormatter.dateStyle = .medium
                    dateFormatter.timeStyle = .short
                    
                    let timeUpdated = dateFormatter.string(from: timeDate)
                    
                    let tmpUpdated: NSString = timeUpdated.trimmingCharacters(in: .whitespacesAndNewlines) as NSString
                    
                    let rangeTileString = tileString.range(of: searchText, options: [.caseInsensitive, .diacriticInsensitive])
                    let rangeDescript = tmpDescript.range(of: searchText, options: [.caseInsensitive, .diacriticInsensitive])
                    let rangeUpdated = tmpUpdated.range(of: searchText, options: [.caseInsensitive, .diacriticInsensitive])
                    
                    return rangeTileString.location != NSNotFound || rangeDescript.location != NSNotFound || rangeUpdated.location != NSNotFound
                })
            }
            
            self.searching = true
            if self.searchingAllNews.count == 0 {
                self.noResultsSearchLabel.isHidden = false
                self.collectionViewNews.reloadData()
            } else {
                self.noResultsSearchLabel.isHidden = true
            }
            
            self.collectionViewNews.reloadData()
        }
    }
    
}

extension MainViewController: UICollectionViewDataSource, UICollectionViewDelegate {

    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        if self.searching {
            return self.searchingAllNews.count
        } else {
            return self.newsData?.articles.count ?? 0
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "MainNewsCell", for: indexPath) as! MainNewsCell
        
        if self.searching {
            cell.displayNews(newsData: self.searchingAllNews[indexPath.row])
        } else {
            if let news = self.newsData {
                cell.displayNews(newsData: news.articles[indexPath.row])
            }
        }
        
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        if let news = self.newsData {
            self.presenter?.notifyRouteToDetailView(news: news.articles[indexPath.row])
        }
    }
    
}

extension MainViewController: UICollectionViewDelegateFlowLayout {
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        if let title = self.newsData?.articles[indexPath.row].title,
           let descriptNews = self.newsData?.articles[indexPath.row].descriptionNews,
           let publishedAt = self.newsData?.articles[indexPath.row].publishedAt {

            let titleSize: CGFloat = title.heightWithConstrainedWidth(width: self.collectionViewNews.frame.width - ConstraintNewsPage.DefaultConstraintLeftRight.cgFloatValue, font: self.fontDetail)
            let descriptNewsSize: CGFloat = descriptNews.heightWithConstrainedWidth(width: self.collectionViewNews.frame.width - ConstraintNewsPage.DefaultConstraintLeftRight.cgFloatValue, font: self.fontDetail)
            let publishedAtSize: CGFloat = publishedAt.heightWithConstrainedWidth(width: self.collectionViewNews.frame.width - ConstraintNewsPage.DefaultConstraintLeftRight.cgFloatValue, font: self.fontDetail)

            let height = (titleSize + descriptNewsSize + publishedAtSize) + ConstraintNewsPage.DefaultSizeCell.cgFloatValue

            return CGSize(width: self.collectionViewNews.frame.width, height: height)
        } else {
            return CGSize(width: self.collectionViewNews.frame.width, height: 0)
        }
    }
    
}
